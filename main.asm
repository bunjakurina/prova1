;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   Tue Jan 28 2020
; Processor: AT89C51
; Compiler:  ASEM-51 (Proteus)
;====================================================================

$NOMOD51
$INCLUDE (8051.MCU)

;====================================================================
; DEFINITIONS and VARIABLES
;====================================================================

      scl equ p2.0
      sda equ p2.1
      menu  equ 21h
      line2 equ 22h
      usecCounterL equ 2eh
      usecCounterH equ 2fh
      msecCounterL equ 30h
      msecCounterH equ 31h
      secCounter equ 32h
      minCounter equ 33h
      hrCounter equ 34h
      modbusData equ 35h
      modbusReceivedDataPointer equ 50h
      modbusReceivedData equ 51h

      org   2f00h
      db    "Time"
      
      org   2f04h
      db    "Date"
      
      org   2f08h
      db    "Stopwatch"
      

;====================================================================
; RESET and INTERRUPT VECTORS
;====================================================================

      ; Reset Vector
      org   0000h
      jmp   Start
      
      ; Timer0 Vector
      org   000bh
      ljmp  Timer0_ISR
      
      ; Serial Vector
      org   0023h
      ljmp  Serial_ISR

;====================================================================
; CODE SEGMENT
;====================================================================

      org   0100h
Start:	
      ; Write your code here
      
      ; menu
      mov   menu, #0
      mov   modbusReceivedDataPointer, #50h
      
      ; Initialize Serial Port
      lcall InitSerialPort
      
      ; Initialize Timers
      lcall InitTimers
      
      setb  ea
      setb  tr1
      
      mov   35h, #'A'
      mov   36h, #'L'
      mov   37h, #'B'
      mov   38h, #'I'
      mov   39h, #'N'
      push  07h
      push  06h
      push  05h
      push  04h
      mov   r7, #00h
      mov   r6, #03h
      mov   r5, #modbusData
      mov   r4, #5
      lcall ModbusASCIISendMessage
      pop   04h
      pop   05h
      pop   06h
      pop   07h
      
      ; Reset display
      lcall ResetDisplay
      
      ; Wait2
      push  07h
      push  06h
      mov   r7, #10
      mov   r6, #100
      lcall Wait2
      pop   06h
      pop   07h
      
      ; Function set
      push  20h
      push  07h
      clr   00h
      mov   r7, #00101000b
      lcall Execute
      pop   07h
      pop   20h
      
      ; Wait2
      push  07h
      push  06h
      mov   r7, #10
      mov   r6, #100
      lcall Wait2
      pop   06h
      pop   07h
      
      ; Display ON
      push  20h
      push  07h
      clr   00h
      mov   r7, #00001100b
      lcall Execute
      pop   07h
      pop   20h
      
      ; Wait2
      push  07h
      push  06h
      mov   r7, #10
      mov   r6, #100
      lcall Wait2
      pop   06h
      pop   07h
      
      ; Entry mode set
      push  20h
      push  07h
      clr   00h
      mov   r7, #00000110b
      lcall Execute
      pop   07h
      pop   20h
      
      ; Wait2
      push  07h
      push  06h
      mov   r7, #10
      mov   r6, #100
      lcall Wait2
      pop   06h
      pop   07h
      
      ; DDRAM Address 0x00
      push  20h
      push  07h
      clr   00h
      mov   r7, #10000000b
      lcall Execute
      pop   07h
      pop   20h
      
      ; Wait1
      push  07h
      mov   r7, #100
      lcall Wait1
      pop   07h
      
      ; print "Time"
      push  dpl
      push  dph
      push  07h
      push  06h
      mov   dptr, #02f00h
      mov   r7, #6
      mov   r6, #4
      lcall PrintText
      pop   06h
      pop   07h
      pop   dph
      pop   dpl
      
      ; write to eeprom
      ;push  07h
      ;push  06h
      ;mov   r7, #00h
      ;mov   r6, #00h
      ;lcall WriteToEEPROM
      ;pop   06h
      ;mov   r7, #'A'
      ;lcall I2cSend
      ;mov   r7, #'L'
      ;lcall I2cSend
      ;mov   r7, #'B'
      ;lcall I2cSend
      ;mov   r7, #'I'
      ;lcall I2cSend
      ;mov   r7, #'N'
      ;lcall I2cSend
      ;lcall I2cStop
      ;pop   07h

Loop:
      
      push  acc
      mov   a, menu
TimeMenu:
      cjne  a, #00000000b, DateMenu
      mov   22h, #' '
      mov   23h, #' '
      mov   26h, #':'
      mov   29h, #':'
      mov   2ch, #' '
      mov   2dh, #' '
      
      push  07h
      push  20h
      push  acc
      
      mov   r7, #00h
      lcall ReadFromRTC
      lcall I2cStart
      mov   r7, #11010001b
      lcall I2cSend
      
      setb  00h
      lcall I2cReceive
      mov   a, r7
      anl   a, #00001111b
      add   a, #'0'
      mov   2bh, a
      mov   a, r7
      anl   a, #01110000b
      swap  a
      add   a, #'0'
      mov   2ah, a
      
      setb  00h
      lcall I2cReceive
      mov   a, r7
      anl   a, #00001111b
      add   a, #'0'
      mov   28h, a
      mov   a, r7
      anl   a, #01110000b
      swap  a
      add   a, #'0'
      mov   27h, a
      
      clr   00h
      lcall I2cReceive
      mov   a, r7
      anl   a, #00001111b
      add   a, #'0'
      mov   25h, a
      mov   a, r7
      anl   a, #00110000b
      swap  a
      add   a, #'0'
      mov   24h, a
      
      lcall I2cStop
      
      pop   acc
      pop   20h
      pop   07h
      
      jmp   Print2ndLineLabel

DateMenu:
      cjne  a, #00000001b, StopwatchMenu
      mov   22h, #' '
      mov   23h, #' '
      mov   26h, #'/'
      mov   29h, #'/'
      mov   2ch, #' '
      mov   2dh, #' '
      
      push  07h
      push  20h
      push  acc
      
      mov   r7, #04h
      lcall ReadFromRTC
      lcall I2cStart
      mov   r7, #11010001b
      lcall I2cSend
      
      setb  00h
      lcall I2cReceive
      mov   a, r7
      anl   a, #00001111b
      add   a, #'0'
      mov   25h, a
      mov   a, r7
      anl   a, #00110000b
      swap  a
      add   a, #'0'
      mov   24h, a
      
      setb  00h
      lcall I2cReceive
      mov   a, r7
      anl   a, #00001111b
      add   a, #'0'
      mov   28h, a
      mov   a, r7
      anl   a, #00010000b
      swap  a
      add   a, #'0'
      mov   27h, a
      
      clr   00h
      lcall I2cReceive
      mov   a, r7
      anl   a, #00001111b
      add   a, #'0'
      mov   2bh, a
      mov   a, r7
      anl   a, #11110000b
      swap  a
      add   a, #'0'
      mov   2ah, a
      
      lcall I2cStop
      
      pop   acc
      pop   20h
      pop   07h
      
      jmp   Print2ndLineLabel

StopwatchMenu:
      cjne  a, #00000010b, Print2ndLineLabel
      
      mov   24h, #':'
      mov   27h, #':'
      mov   2ah, #'.'
      
      push  07h
      push  06h
      mov   r7, hrCounter
      mov   r6, #22h
      lcall IntToString1
      pop   06h
      pop   07h
      
      push  07h
      push  06h
      mov   r7, minCounter
      mov   r6, #25h
      lcall IntToString1
      pop   06h
      pop   07h
      
      push  07h
      push  06h
      mov   r7, secCounter
      mov   r6, #28h
      lcall IntToString1
      pop   06h
      pop   07h
      
      push  07h
      push  06h
      push  05h
      mov   r7, msecCounterL
      mov   r6, msecCounterH
      mov   r5, #2bh
      lcall IntToString2
      pop   05h
      pop   06h
      pop   07h
      
CheckIfP12ButtonIsPressed:
      jnb   p1.2, P12ButtonIsPressed
      jmp   CheckIfP13ButtonIsPressed
      
P12ButtonIsPressed:
      setb  tr0
      
CheckIfP13ButtonIsPressed:
      jnb   p1.3, P13ButtonIsPressed
      jmp   Print2ndLineLabel
      
P13ButtonIsPressed:
      clr   tr0
      
Print2ndLineLabel:
      lcall Print2ndLine
      
CheckIfP10ButtonIsPressed:
      jnb   p1.0, P10ButtonIsPressed
      jmp   CheckIfP11ButtonIsPressed
      
P10ButtonIsPressed:
      inc   menu
      
      push  acc
      mov   a, menu
      cjne  a, #00000011b, MenuNot3
      mov   menu, #0
MenuNot3:
      pop   acc
      lcall ClearScreen
      
      jmp   CheckMenu

CheckIfP11ButtonIsPressed:
      jnb   p1.1, P11ButtonIsPressed
      jmp   LoopEnd

P11ButtonIsPressed:
      dec   menu
      
      push  acc
      mov   a, menu
      cjne  a, #11111111b, MenuNot255
      mov   menu, #2
MenuNot255:
      pop   acc
      lcall ClearScreen
      
CheckMenu:
      push  acc
      mov   a, menu
CheckIfItsTimeMenu:
      cjne  a, #00000000b, CheckIfItsDateMenu
      
      ; print "Time"
      push  dpl
      push  dph
      push  07h
      push  06h
      mov   dptr, #02f00h
      mov   r7, #6
      mov   r6, #4
      lcall PrintText
      pop   06h
      pop   07h
      pop   dph
      pop   dpl
      
      jmp   EndOfCheckingMenu
      
CheckIfItsDateMenu:
      cjne  a, #00000001b, CheckIfItsStopwatchMenu
      
      ; print "Date"
      push  dpl
      push  dph
      push  07h
      push  06h
      mov   dptr, #02f04h
      mov   r7, #6
      mov   r6, #4
      lcall PrintText
      pop   06h
      pop   07h
      pop   dph
      pop   dpl
      
      jmp   EndOfCheckingMenu
      
CheckIfItsStopwatchMenu:
      cjne  a, #00000010b, EndOfCheckingMenu
      
      ; print "Stopwatch"
      push  dpl
      push  dph
      push  07h
      push  06h
      mov   dptr, #02f08h
      mov   r7, #3
      mov   r6, #9
      lcall PrintText
      pop   06h
      pop   07h
      pop   dph
      pop   dpl
      
EndOfCheckingMenu:
      
      pop   acc
      
LoopEnd:
      pop   acc
      
      jmp   Loop


Wait1:
      push  00h
      mov   r0, 07h
Wait1_loop:
      djnz  r0, Wait1_loop
      pop   00h
      ret
      
Wait2:
      push  01h
      push  00h
      mov   r1, 07h
Wait2_loop0:
      mov   r0, 06h
Wait2_loop1:
      djnz  r0, Wait2_loop1
      djnz  r1, Wait2_loop0
      pop   00h
      pop   01h
      ret

ResetDisplay:
      ; p0 = 0
      mov   p0, #00h
      
      ; Wait2
      push  07h
      push  06h
      mov   r7, #100
      mov   r6, #100
      lcall Wait2
      pop   06h
      pop   07h
      
      ; p0.7654 = 0011
      clr   p0.7
      clr   p0.6
      setb  p0.5
      setb  p0.4
      
      ; enable
      lcall Enable
      
      ;Wait2
      push  07h
      push  06h
      mov   r7, #5
      mov   r6, #100
      lcall Wait2
      pop   06h
      pop   07h
      
      ; p0.7654 = 0011
      clr   p0.7
      clr   p0.6
      setb  p0.5
      setb  p0.4
      
      ; enable
      lcall Enable
      
      ; Wait2
      push  07h
      push  06h
      mov   r7, #5
      mov   r6, #100
      lcall Wait2
      pop   06h
      pop   07h
      
      ; p0.7654 = 0011
      clr   p0.7
      clr   p0.6
      setb  p0.5
      setb  p0.4
      
      ; enable
      lcall Enable
      
      ; Wait2
      push  07h
      push  06h
      mov   r7, #100
      mov   r6, #100
      lcall Wait2
      pop   06h
      pop   07h
      
      ; p0.7654 = 0010
      clr   p0.7
      clr   p0.6
      setb  p0.5
      clr   p0.4
      
      ; enable
      lcall Enable
      
      ret

Enable:
      setb  p0.3
      
      ; Wait1
      push  07h
      mov   r7, #50
      lcall Wait1
      pop   07h
      
      clr   p0.3
      ret

Execute:
      push  20h
      mov   01h, c
      mov   c, 00h
      mov   p0.2, c
      mov   c, 01h
      pop   20h
      push  acc
      mov   acc, r7
      
      ; p0.7654 = acc.7654
      push  20h
      mov   01h, c
      mov   c, acc.7
      mov   p0.7, c
      mov   c, acc.6
      mov   p0.6, c
      mov   c, acc.5
      mov   p0.5, c
      mov   c, acc.4
      mov   p0.4, c
      mov   c, 01h
      pop   20h
      
      ; enable
      lcall Enable
      
      ; Wait1
      push  07h
      mov   r7, #150
      lcall Wait1
      pop   07h
      
      ; p0.7654 = acc.3210
      push  20h
      mov   01h, c
      mov   c, acc.3
      mov   p0.7, c
      mov   c, acc.2
      mov   p0.6, c
      mov   c, acc.1
      mov   p0.5, c
      mov   c, acc.0
      mov   p0.4, c
      mov   c, 01h
      pop   20h
      
      ; enable
      lcall Enable
      
      ; Wait1
      push  07h
      mov   r7, #150
      lcall Wait1
      pop   07h
      
      pop   acc
      
      ret
      
PrintText:
      ; set lcd address
      push  20h
      push  07h
      clr   00h
      push  acc
      mov   a, #10000000b
      orl   a, r7
      mov   r7, a
      lcall Execute
      pop   acc
      pop   07h
      pop   20h
      
      ; Wait2
      push  07h
      push  06h
      mov   r7, #10
      mov   r6, #100
      lcall Wait2
      pop   06h
      pop   07h
      
      push  acc
      mov   a, #0
PrintText_loop:
      push  20h
      push  07h
      setb  00h
      push  acc
      movc  a, @a+dptr
      mov   r7, a
      pop   acc
      lcall Execute
      pop   07h
      pop   20h
      inc   a
      djnz  r6, PrintText_loop
      pop   acc
      
      ret
      
Print2ndLine:
      ; set lcd address
      push  20h
      push  07h
      clr   00h
      mov   r7, #11000010b
      lcall Execute
      pop   07h
      pop   20h
      
      ; Wait2
      push  07h
      mov   r7, #100
      lcall Wait1
      pop   07h
      
      push  00h
      push  01h
      mov   r0, #12
      mov   r1, #line2
Print2ndLine_loop:
      push  20h
      push  07h
      setb  00h
      mov   07h, @r1
      lcall Execute
      pop   07h
      pop   20h
      inc   r1
      djnz  r0, Print2ndLine_loop
      pop   01h
      pop   00h
      
      ret
      
ClearScreen:
      push  20h
      push  07h
      clr   00h
      mov   r7, #00000001b
      lcall Execute
      pop   07h
      pop   20h
      
      ; wait2
      push  07h
      push  06h
      mov   r7, #255
      mov   r6, #255
      lcall Wait2
      pop   06h
      pop   07h
      
      ret
      
I2cStart:
      setb  sda
      setb  scl
      
      ; Wait1
      push  07h
      mov   r7, #100
      lcall Wait1
      pop   07h
      
      clr   sda
      
      ; Wait1
      push  07h
      mov   r7, #100
      lcall Wait1
      pop   07h
      
      clr   scl
      
      ; Wait1
      push  07h
      mov   r7, #100
      lcall Wait1
      pop   07h
      
      ret
      
I2cStop:
      clr   sda
      
      ; Wait1
      push  07h
      mov   r7, #100
      lcall Wait1
      pop   07h
      
      setb  scl
      
      ; Wait1
      push  07h
      mov   r7, #100
      lcall Wait1
      pop   07h
      
      setb  sda
      
      ; Wait1
      push  07h
      mov   r7, #100
      lcall Wait1
      pop   07h

      ret
      
I2cSend:
      push  00h
      mov   r0, #8
      mov   a, r7
I2cSend_loop:
      push  20h
      mov   01h, c
      mov   c, acc.7
      mov   sda, c
      mov   c, 01h
      pop   20h
      
      ; Wait1
      push  07h
      mov   r7, #100
      lcall Wait1
      pop   07h
      
      setb  scl
      
      ; Wait1
      push  07h
      mov   r7, #100
      lcall Wait1
      pop   07h
      
      clr   scl
      
      ; Wait1
      push  07h
      mov   r7, #100
      lcall Wait1
      pop   07h
      
      rl    a
      
      djnz  r0, I2cSend_Loop
      
      setb  sda
      
      ; Wait1
      push  07h
      mov   r7, #100
      lcall Wait1
      pop   07h
      
      setb  scl
      
      ; Wait1
      push  07h
      mov   r7, #100
      lcall Wait1
      pop   07h
      
      clr   scl
      
      ; Wait1
      push  07h
      mov   r7, #100
      lcall Wait1
      pop   07h
      
      pop   00h
      
      ret

I2cReceive:
      setb  sda
      
      ; Wait2
      push  07h
      mov   r7, #100
      lcall Wait1
      pop   07h
      
      push  00h
      mov   r0, #8
      push  acc
      mov   a, #0
I2cReceive_loop:
      rl    a
      setb  scl
      
      push  20h
      mov   01h, c
      mov   c, sda
      mov   acc.0, c
      mov   c, 01h
      pop   20h
      
      ; Wait1
      push  07h
      mov   r7, #100
      lcall Wait1
      pop   07h
      
      clr   scl
      
      ; Wait1
      push  07h
      mov   r7, #100
      lcall Wait1
      pop   07h
      
      djnz  r0, I2cReceive_loop
      
      mov   r7, a
      
      pop   acc
      pop   00h
      
      jnb   00h, I2cReceive_cNotSet
      clr   sda
      jmp   I2cReceive_cIsSet
I2cReceive_cNotSet:
      setb  sda
I2cReceive_cIsSet:
      
      ; Wait1
      push  07h
      mov   r7, #100
      lcall Wait1
      pop   07h
      
      setb  scl
      
      ; Wait1
      push  07h
      mov   r7, #100
      lcall Wait1
      pop   07h
      
      clr   scl
      
      ; Wait2
      push  07h
      mov   r7, #100
      lcall Wait1
      pop   07h

      ret

WriteToRTC:
      lcall I2cStart
      
      push  07h
      mov   r7, #11010000b
      lcall I2cSend
      pop   07h
      
      lcall I2cSend
      
      ret

ReadFromRTC:
      lcall WriteToRTC
      
      ret
      
WriteToEEPROM:
      lcall I2cStart
      
      push  07h
      mov   r7, #10100000b
      lcall I2cSend
      pop   07h
      
      push  07h
      mov   r7, 06h
      lcall I2cSend
      pop   07h
      
      lcall I2cSend
      
      ret
      
ReadFromEEPROM:
      lcall WriteToEEPROM

      ret
      
IntToString1:
      
      push  acc
      mov   a, r7
      push  b
      mov   b, #10
      div   ab
      
      push  00h
      mov   r0, 06h
      add   a, #'0'
      mov   @r0, a
      inc   r0
      mov   a, b
      add   a, #'0'
      mov   @r0, a
      pop   00h
      
      pop   b
      pop   acc
      
      ret
      
IntToString2:
      
      push  acc
      push  02h
      push  03h
      push  04h
      mov   a, r7
      push  b
      mov   b, #10
      div   ab
      mov   r2, b
      
      mov   b, #10
      div   ab
      mov   r3, b
      mov   r4, a
      
      mov   a, r6
      cjne  a, #00h, IntToString2_next
      
IntToString2_next:
      mov   a, #6
      add   a, r2
      mov   b, #10
      div   ab
      mov   r2, b
      
      add   a, #5
      add   a, r3
      mov   b, #10
      div   ab
      mov   r3, b
      
      add   a, #2
      add   a, r4
      mov   b, #10
      div   ab
      mov   r4, b
      
      djnz  r6, IntToString2_next
      
      pop   b
      
      push  00h
      mov   r0, 05h
      mov   a, r4
      add   a, #'0'
      mov   r4, a
      mov   @r0, 04h
      inc   r0
      mov   a, r3
      add   a, #'0'
      mov   r3, a
      mov   @r0, 03h
      inc   r0
      mov   a, r2
      add   a, #'0'
      mov   r2, a
      mov   @r0, 02h
      pop   00h
      
      pop   04h
      pop   03h
      pop   02h
      pop   acc
      
      ret

InitTimers:
      mov   tmod, #00100010b
      mov   th0, #05h
      mov   tl0, #05h
      mov   th1, #0feh
      setb  et0
      ; setb  tr1
      
      ret
      
InitSerialPort:
      mov   scon, #50h
      setb  es
      
      ret
      
AddParityBit:
      push  acc
      mov   a, r7
      anl   a, #01111111b
AddParityBit_checkIfParityBit:
      jnb   p, AddParityBit_checkIfParityBitEnd
      orl   a, #10000000b
AddParityBit_checkIfParityBitEnd:
      mov   r7, a
      pop   acc
      ret
      
ModbusASCIISendByte:
      push  acc
      mov   a, r7
      swap  a
      anl   a, #00001111b
      
      acall ModbusASCIISendByte_CompareTo9
      
      mov   a, r7
      anl   a, #00001111b
      
      acall ModbusASCIISendByte_CompareTo9
      
      jmp   ModbusASCIISendByteEnd
      
ModbusASCIISendByte_CompareTo9:
      cjne  a, #9, ModbusASCIISendByte_NotEqualTo9
ModbusASCIISendByte_LessOrEqualTo9:
      add   a, #'0'
      jmp   ModbusASCIISendByte_CompareTo9End
ModbusASCIISendByte_NotEqualTo9:
      jc    ModbusASCIISendByte_LessOrEqualTo9
      add   a, #'A'
      subb  a, #10
ModbusASCIISendByte_CompareTo9End:
      push  07h
      mov   r7, a
      lcall AddParityBit
      mov   a, r7
      pop   07h
      mov   sbuf, a
      jnb   ti, $
      clr   ti
      
      ret
      
ModbusASCIISendByteEnd:
      
      pop   acc
      
      ret

ModbusASCIISendMessage:
      push  07h
      mov   r7, #':'
      lcall AddParityBit
      mov   sbuf, r7
      pop   07h
      jnb   ti, $
      clr   ti
      
      lcall ModbusASCIISendByte
      
      push  07h
      mov   r7, 06h
      lcall ModbusASCIISendByte
      pop   07h
      
      push  04h
      push  00h
      mov   r0, 05h
ModbusASCIISendMessage_loop0:
      push  07h
      mov   07h, @r0
      lcall ModbusASCIISendByte
      pop   07h
      inc   r0
      djnz  r4, ModbusASCIISendMessage_loop0
      pop   00h
      pop   04h
      
      push  acc
      mov   a, r7
      add   a, r6
      push  04h
      push  00h
      mov   r0, 05h
ModbusASCIISendMessage_loop1:
      add   a, @r0
      inc   r0
      djnz  r4, ModbusASCIISendMessage_loop1
      pop   00h
      pop   04h
      clr   c
      cpl   a
      inc   a
      push  07h
      mov   r7, a
      lcall ModbusASCIISendByte
      pop   07h
      pop   acc
      
      push  07h
      mov   r7, #0dh
      lcall AddParityBit
      mov   sbuf, r7
      pop   07h
      jnb   ti, $
      clr   ti
      
      push  07h
      mov   r7, #0ah
      lcall AddParityBit
      mov   sbuf, r7
      pop   07h
      jnb   ti, $
      clr   ti
      
      ret
      
Timer0_ISR:
      clr   tf0
      
      push  acc
      push  20h
      mov   01h, c
      clr   c
      mov   a, usecCounterL
      add   a, #0fah
      mov   usecCounterL, a
      mov   a, usecCounterH
      addc  a, #00h
      mov   usecCounterH, a
      mov   c, 01h
      pop   20h
      pop   acc
      
CheckIfUSecs1000:
      push  acc
      mov   a, usecCounterH
      cjne  a, #03h, CheckIfUSecs1000End
      mov   a, usecCounterL
      cjne  a, #0e8h, CheckIfUSecs1000End
      
      push  20h
      mov   01h, c
      clr   c
      mov   a, msecCounterL
      add   a, #01h
      mov   msecCounterL, a
      mov   a, msecCounterH
      addc  a, #00h
      mov   msecCounterH, a
      mov   c, 01h
      pop   20h
      
      mov   usecCounterL, #0
      mov   usecCounterH, #0

CheckIfUSecs1000End:
      pop   acc
      
CheckIfMSecs1000:
      push  acc
      mov   a, msecCounterH
      cjne  a, #03h, CheckIfMSecs1000End
      mov   a, msecCounterL
      cjne  a, #0e8h, CheckIfMSecs1000End
      
      push  20h
      mov   01h, c
      clr   c
      mov   a, secCounter
      add   a, #01h
      mov   secCounter, a
      mov   c, 01h
      pop   20h
      
      mov   msecCounterL, #0
      mov   msecCounterH, #0

CheckIfMSecs1000End:
      pop   acc
      
CheckIfSecs60:
      push  acc
      mov   a, secCounter
      cjne  a, #60, CheckIfSecs60End
      
      push  20h
      mov   01h, c
      clr   c
      mov   a, minCounter
      add   a, #01h
      mov   minCounter, a
      mov   c, 01h
      pop   20h
      
      mov   secCounter, #0

CheckIfSecs60End:
      pop   acc
      
CheckIfMins60:
      push  acc
      mov   a, minCounter
      cjne  a, #60, CheckIfMins60End
      
      push  20h
      mov   01h, c
      clr   c
      mov   a, hrCounter
      add   a, #01h
      mov   hrCounter, a
      mov   c, 01h
      pop   20h
      
      mov   minCounter, #0

CheckIfMins60End:
      pop   acc
      
CheckIfHrs24:
      push  acc
      mov   a, minCounter
      cjne  a, #24, CheckIfHrs24End
      
      mov   minCounter, #0

CheckIfHrs24End:
      pop   acc
      
      reti
      
Serial_ISR:

CheckIfRiFlag:
      jnb   ri, CheckIfRiFlagEnd
      inc   modbusReceivedDataPointer
      push  acc
      push  00h
      mov   a, sbuf
      clr   acc.7
      mov   r0, modbusReceivedDataPointer
      mov   @r0, a
      pop   00h
      pop   acc
      clr   ri
CheckIfRiFlagEnd:
      
      reti

;====================================================================
      END
